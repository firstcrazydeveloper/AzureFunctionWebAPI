# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- feature/*

variables:
  # Azure Resource Manager connection created during pipeline creation
  devazureSubscription: 'f27beff6-c5b7-41a5-bd50-2b9fce4760ca'

  # Function app name
  devFunctionAppName: 'fcd-dev-web-app-abc'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/source/src/SampleAzureFunctionCode'
  testsDirectory: '$(System.DefaultWorkingDirectory)/source/tests/SampleAzureFunctionCode.Tests'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Install dotnetsay'
      inputs:
        command: custom
        custom: tool
        arguments: 'install -g dotnetsay'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release


    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Start_Run_Test
  displayName: Run Test Cases
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: Start_Run_Test
    displayName: Test Builder
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Install dotnetsay'
      inputs:
        command: custom
        custom: tool
        arguments: 'install -g dotnetsay'

    - script: dotnet test $(System.DefaultWorkingDirectory)/source/tests/SampleAzureFunctionCode.Tests/SampleAzureFunctionCode.Tests.csproj --logger trx --collect "Code coverage"
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'   
    
- stage: Resource_Deployment
  displayName: Resource Deployment
  dependsOn: Start_Run_Test
  condition: succeeded()

  jobs:
  - job: Start_Resource_Deployment
    displayName: Resources
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: AzureCLI@2
      displayName: 'Resource Deployment'
      inputs:
        azureSubscription: 'AzureFunction'
        scriptType: ps
        scriptPath: '$(System.DefaultWorkingDirectory)/config/config.ps1'

   

- stage: Dev_Deployment
  displayName: Dev Deployment stage
  dependsOn: Resource_Deployment
  condition: succeeded()

  jobs:
  - deployment: Dev_Deployment
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: 'AzureFunction'
              appType: functionApp
              appName: $(devFunctionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
  
  
              
